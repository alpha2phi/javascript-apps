{"version":3,"sources":["components/LookupCity.js","components/DynamicGrid.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["cities","require","LOOKUP","COUNTRIES","setDirty","props","data","changed","rows","push","node","selectable","api","redrawRows","rowNodes","CountryRenderer","defaultValue","country","onChange","e","target","value","subcountry","city","refreshCells","columns","force","onChangeCountry","map","SubcountryRenderer","subcountries","onChangeSubcountry","CityRenderer","onChangeCity","DynamicGrid","useState","setData","gridApi","setGridApi","frameworkComponents","useEffect","a","persons","i","person","name","faker","findName","email","internet","loadData","className","document","getElementById","paginationSetPageSize","Number","onPageSizeChanged","id","style","height","marginLeft","marginRight","marginTop","onGridReady","params","sizeColumnsToFit","rowData","columnDefs","field","headerName","checkboxSelection","width","headerCheckboxSelection","pinned","filter","sortable","resizable","floatingFilter","cellRenderer","suppressRowClickSelection","pagination","paginationPageSize","enableRangeSelection","paginationNumberFormatter","toLocaleString","rowSelection","enableCellTextSelection","isRowSelectable","rowNode","forEach","includes","sort","Object","keys","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.32337d59.chunk.js","sourcesContent":["import React from 'react';\n\nconst cities = require('../data/cities.json');\nconst LOOKUP = {};\nconst COUNTRIES = [];\n\ncities.forEach(function(city) {\n\n\t// Country to subcountries\n\tif (LOOKUP[city.country]) {\n\t\tconst subcountries = LOOKUP[city.country];\n\t\tif (!subcountries.includes(city.subcountry)) {\n\t\t\tsubcountries.push(city.subcountry);\n\t\t}\n\t} else {\n\t\tCOUNTRIES.push(city.country);\n\t\tconst subcountries = [];\n\t\tsubcountries.push(city.subcountry);\n\t\tLOOKUP[city.country] = subcountries;\n\t}\n\n\t// Subcountry to cities\n\tif (LOOKUP[city.subcountry]) {\n\t\tconst cities = LOOKUP[city.subcountry];\n\t\tif (!cities.includes(city.name)) {\n\t\t\tcities.push(city.name);\n\t\t}\n\t} else {\n\t\tconst cities = [];\n\t\tcities.push(city.name);\n\t\tLOOKUP[city.subcountry] = cities;\n\t}\n});\n\nCOUNTRIES.sort();\n\nObject.keys(LOOKUP).forEach(function(key) {\n\tconst values = LOOKUP[key];\n\tvalues.sort();\n});\n\n\nfunction setDirty(props) {\n    if (props.data.changed) return;\n\n    props.data.changed = true;\n    const rows = [];\n    rows.push(props.node);\n    props.node.selectable = true;\n    props.api.redrawRows({ rowNodes: rows });\n}\n\nexport function CountryRenderer(props) {\n\n\tconst onChangeCountry = (e) => {\n\t\tsetDirty(props);\n\n\t\tprops.data.country = e.target.value;\n\t\tprops.data.subcountry = \"\";\n\t\tprops.data.city = \"\";\n\t\tprops.api.refreshCells({ columns: ['subcountry', 'city'], force: true });\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<select defaultValue={props.data.country} onChange={(e) => onChangeCountry(e)}>\n\t\t\t\t<option key=\"\"></option>\n\t\t\t\t{COUNTRIES.map(country =>\n\t\t\t\t\t<option key={country}>{country}</option>\n\t\t\t\t)}\n\t\t\t</select>\n\t\t</div>\n\t)\n}\n\nexport function SubcountryRenderer(props) {\n\tvar country = props.data.country;\n\tvar subcountries = [];\n\tif (country) {\n\t\tsubcountries = LOOKUP[country];\n\t}\n\n\tconst onChangeSubcountry = (e) => {\n\t\tsetDirty(props);\n\n\t\tprops.data.subcountry = e.target.value;\n\t\tprops.data.city = \"\";\n\t\tprops.api.refreshCells({ columns: ['city'], force: true });\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<select defaultValue={props.data.subcountry} onChange={(e) => onChangeSubcountry(e)}>\n\t\t\t\t<option key=\"\"></option>\n\t\t\t\t{subcountries.map(subcountry =>\n\t\t\t\t\t<option key={subcountry}>{subcountry}</option>\n\t\t\t\t)}\n\t\t\t</select>\n\t\t</div>\n\t)\n}\n\nexport function CityRenderer(props)  {\n\tvar subcountry = props.data.subcountry;\n\tvar cities = [];\n\tif (subcountry) {\n\t\tcities = LOOKUP[subcountry];\n\t\tif (!cities) cities = [];\n\t}\n\n\tconst onChangeCity = (e) => {\n\t\tsetDirty(props);\n\n\t\tprops.data.city = e.target.value;\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<select defaultValue={props.data.city} onChange={(e) => onChangeCity(e)}>\n\t\t\t\t<option key=\"\"></option>\n\t\t\t\t{cities.map(city =>\n\t\t\t\t\t<option key={city}>{city}</option>\n\t\t\t\t)}\n\t\t\t</select>\n\t\t</div>\n\t)\n}\n","import React, { useState, useEffect } from 'react';\nimport './DynamicGrid.css';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport faker from \"faker\";\nimport { CountryRenderer, SubcountryRenderer, CityRenderer } from \"./LookupCity\";\n\nexport default function DynamicGrid() {\n\tconst columnDefs = [{\n\t\tfield: \"row_id\",\n\t\theaderName: \"#\",\n\t\tcheckboxSelection: function(params) {\n\t\t\tif (params.data.changed) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\twidth: 50,\n\t\theaderCheckboxSelection: true,\n\t\tpinned: 'left'\n\t},\n\t{ field: \"name\", headerName: \"Name\", filter: true, sortable: true, resizable: true, floatingFilter: true, pinned: 'left' },\n\t{ field: \"email\", headerName: \"Email\", filter: true, sortable: true, resizable: true, floatingFilter: true },\n\t{\n\t\tfield: \"country\",\n\t\theaderName: \"Country\",\n\t\tresizable: true,\n\t\tcellRenderer: \"CountryRenderer\",\n\t\twidth: 350\n\t},\n\t{\n\t\tfield: \"subcountry\",\n\t\theaderName: \"Subcountry\",\n\t\tresizable: true,\n\t\tcellRenderer: \"SubcountryRenderer\",\n\t\twidth: 300\n\t},\n\t{\n\t\tfield: \"city\",\n\t\theaderName: \"City\",\n\t\tresizable: true,\n\t\tcellRenderer: \"CityRenderer\",\n\t\twidth: 300\n\t},\n\t];\n\n\tconst [data, setData] = useState([]);\n\tconst [gridApi, setGridApi] = useState(null);\n\tconst frameworkComponents = {\n\t\tCountryRenderer: CountryRenderer,\n\t\tSubcountryRenderer: SubcountryRenderer,\n\t\tCityRenderer: CityRenderer,\n\t};\n\n\tuseEffect(() => {\n\t\tasync function loadData() {\n\t\t\tconst persons = [];\n\t\t\tfor (var i = 0; i < 1000; i++) {\n\t\t\t\tvar person = {};\n\t\t\t\tperson.name = faker.name.findName();\n\t\t\t\tperson.email = faker.internet.email();\n\t\t\t\tperson.country = \"\";\n\t\t\t\tperson.subcountry = \"\";\n\t\t\t\tperson.city = \"\";\n\t\t\t\tpersons.push(person);\n\t\t\t}\n\t\t\tsetData(persons);\n\n\t\t}\n\t\tloadData();\n\t}, []);\n\n\tfunction onGridReady(params) {\n\t\tsetGridApi(params.api);\n\t\tparams.api.sizeColumnsToFit();\n\t}\n\n\tconst onPageSizeChanged = () => {\n\t\tconst value = document.getElementById('page_size').value;\n\t\tgridApi.paginationSetPageSize(Number(value));\n\t};\n\n\treturn (\n\t\t<div className=\"grid-header\">\n\t\t\t<h1>Dynamic Grid</h1>\n\t\t\t<div className=\"paging\">\n\t\t\t\tPage Size: &nbsp;\n\t\t\t\t<select onChange={() => onPageSizeChanged()} id=\"page_size\">\n\t\t\t\t\t<option value=\"10\" defaultValue={true}>10</option>\n\t\t\t\t\t<option value=\"20\">20</option>\n\t\t\t\t\t<option value=\"50\">50</option>\n\t\t\t\t\t<option value=\"100\">100</option>\n\t\t\t\t\t<option value=\"500\">500</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t\t<div className=\"ag-theme-alpine\" style={{\n\t\t\t\theight: 600, marginLeft: 20, marginRight: 20, marginTop: 10\n\t\t\t}}>\n\t\t\t\t<AgGridReact\n\t\t\t\t\tonGridReady={onGridReady}\n\t\t\t\t\trowData={data}\n\t\t\t\t\tcolumnDefs={columnDefs}\n\t\t\t\t\tsuppressRowClickSelection={true}\n\t\t\t\t\tpagination={true}\n\t\t\t\t\tpaginationPageSize={10}\n\t\t\t\t\tenableRangeSelection={true}\n\t\t\t\t\tpaginationNumberFormatter={\n\t\t\t\t\t\tfunction(params) { return '[' + params.value.toLocaleString() + ']'; }}\n\t\t\t\t\trowSelection={'multiple'}\n\t\t\t\t\tsizeColumnsToFit={true}\n\t\t\t\t\tenableCellTextSelection={true}\n\t\t\t\t\tframeworkComponents={frameworkComponents}\n\t\t\t\t\tisRowSelectable={\n\t\t\t\t\t\tfunction(rowNode) { return false; }}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import './App.css';\nimport DynamicGrid from './components/DynamicGrid.js';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n\t  <DynamicGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}